type Freelancer {
  id: ID!
  nom: String
  email: String
  bio: String

  imageUrl: String
  skills: [Skill]
  links: [SocialLink]
}

type Skill {
  id: ID!
  nom: String
}

type SocialLink {
  id: ID!
  url: String
  type: String
}

type Query {
  freelancers: [Freelancer]
  freelancer(id: ID!): Freelancer
  skills: [Skill]
  socialLinks: [SocialLink]
  getFreelancersBySkill(skillName: String!): [Freelancer]

}


type AuthPayload {
  token: String
  admin: Admin
}

type Admin {
  id: ID!
  username: String!
}


type Mutation {
  createFreelancer(nom: String!, email: String!, bio: String,   base64Image: String ): Freelancer
  deleteFreelancer(id: ID!): Boolean
  addSkill(freelancerId: ID!, nom: String!): Skill
  addSocialLink(freelancerId: ID!, url: String!, type: String!): SocialLink
    deleteSkill(freelancerId: ID!, skillId: ID!): Boolean
    deleteSocialLink(freelancerId: ID!, socialLinkId: ID!): Boolean
    updateFreelancer(id: ID!, nom: String, email: String, bio: String): Freelancer
    updateSkill(freelancerId: ID!, skillId: ID!, nom: String!): Skill
    updateSocialLink(freelancerId: ID!, socialLinkId: ID!, url: String!, type: String!): SocialLink

  removeSocialLinkFromFreelancer(freelancerId: ID!, socialLinkId: ID!): Boolean
    removeSkillFromFreelancer(freelancerId: ID!, skillId: ID!): Boolean

  register(username: String!, password: String!): AuthPayload!
  login(username: String!, password: String!): AuthPayload!

  updateFreelancerWithDetails(
    id: ID!
    nom: String!
    email: String!
    bio: String
    skills: [String]
    socialLinksUrls: [String]
    socialLinksTypes: [String]
  ): Freelancer

}
